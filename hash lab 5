#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define SIZE 10
int dat[100];
int DAT[101] = {0};
int prime(int n)
{
if (DAT[n] == 1)
 {
return 0;
 }
if (n < 2)
 {
DAT[n] = 1;
 }
for (int i = 2; i <= (sqrt(n)); i++)
 {
if (DAT[i] == 0)
 {
for (int j = i + i; j <= n; j += i)
 {
DAT[j] = 1;
 }
 }
 }
if (DAT[n] == 1)
 {
return 0;
 }
else
 {
return 1;
 }
}
int without_collision_case()
{
int size, t, data, location, i, temp;
printf("\nENTER NUMBER OF DATA WANT TO ENTER:");
scanf("%d", &t);
temp = t;
while (!prime(temp))
 {
temp++;
 }
size = temp--;
printf("\nENTER YOUR DATA AND LOCATION:\n");
while (t)
 {
scanf("%d%d", &data, &location);
if (dat[location] == 0)
 {
dat[location] = data;
 }
t--;
 }
printf("\nHASH TABLE SIZE:%d\nINDEX DATA\n", size);
for (i = 0; i < size; i++)
 {
printf("%5d %d\n", i, dat[i]);
 }
return 0;
}
int h1(int key, int m)
{
return (key % m);
}
int h2(int key, int m)
{
return ((m - 1) - (key % (m - 1))); // return (m-(key%m));
}
int linear_probing()
{
int size;
int n, data, i, m, temp, index, flag;
printf("\nENTER NUMBER OF DATA WANT TO ENTER:");
scanf("%d", &n);
printf("\nENTER YOUR DATA:\n");
temp = n;
while (!prime(temp))
 {
temp++;
 }
m = temp--;
size = m; // hash table size which is been used
while (n)
 {
flag = 0;
scanf("%d", &data);
for (i = 0; i < size; i++)
 {
index = (h1(data, m) + (i)) % m;
if (dat[index] == 0)
 {
dat[index] = data;
flag = 1;
break;
 }
 }
if (flag == 0)
 {
printf("NO LOCATION AVAILABLE TO STORE THE %d DATA", data);
return -1;
 }
n--;
 }
printf("\nHASH TABLE SIZE:%d\nINDEX DATA\n", size);
for (i = 0; i < size; i++)
 {
printf("%5d %d\n", i, dat[i]);
 }
return 0;
}
int quadratic_probing()
{
int size;
int n, data, i, m, temp, index, flag = 0;
printf("\nENTER NUMBER OF DATA WANT TO ENTER:");
scanf("%d", &n);
printf("\nENTER YOUR DATA:\n");
temp = n;
while (!prime(temp))
 {
temp++;
 }
m = temp--;
size = m; // hash table size which is been used
while (n)
 {
flag = 0;
scanf("%d", &data);
for (i = 0; i < size; i++)
 {
index = (h1(data, m) + (i * i)) % m;
if (dat[index] == 0)
 {
dat[index] = data;
flag = 1;
break;
 }
 }
if (flag == 0)
 {
printf("NO LOCATION AVAILABLE TO STORE THE %d DATA", data);
return -1;
 }
n--;
 }
printf("\nHASH TABLE SIZE:%d\nINDEX DATA\n", size);
for (i = 0; i < size; i++)
 {
printf("%5d %d\n", i, dat[i]);
 }
return 0;
}
int double_hashing()
{
int size;
int n, data, i, m, temp, index, flag = 0;
printf("\nENTER NUMBER OF DATA WANT TO ENTER:");
scanf("%d", &n);
printf("\nENTER YOUR DATA:\n");
temp = n;
while (!prime(temp))
 {
temp++;
 }
m = temp--;
size = m;
while (n)
 {
flag = 0;
scanf("%d", &data);
for (i = 0; i < size; i++)
 {
index = (h1(data, m) + (i * h2(data, m))) % m;
if (dat[index] == 0)
 {
dat[index] = data;
flag = 1;
break;
 }
 }
if (flag == 0)
 {
printf("NO LOCATION AVAILABLE TO STORE THE %d DATA", data);
return -1;
 }
n--;
 }
printf("\nHASH TABLE SIZE:%d\nINDEX DATA\n", size);
for (i = 0; i < size; i++)
 {
printf("%5d %d\n", i, dat[i]);
 }
return 0;
}
struct node
{
int data;
struct node *next;
};
struct node *chain[SIZE];
void insert(int data, int m)
{
struct node *add_node = (struct node *)malloc(sizeof(struct node));
add_node->data = data;
add_node->next = NULL;
int index = h1(data, m);
if (chain[index] == NULL)
 {
chain[index] = add_node;
 }
else
 {
struct node *temp = chain[index];
while (temp->next)
 {
temp = temp->next;
 }
temp->next = add_node;
 }
}
int separate_chaining()
{
int n, data, i, tem, m;
printf("\nENTER NUMBER OF DATA WANT TO ENTER:");
scanf("%d", &n);
for (i = 0; i < SIZE; i++)
 {
chain[i] = NULL;
 }
printf("\nENTER YOUR DATA:\n");
tem = n;
while (!prime(tem))
 {
tem++;
 }
m = tem--;
while (n)
 {
scanf("%d", &data);
insert(data, m);
n--;
 }
printf("\n\n");
for (i = 0; i < m; i++)
 {
struct node *temp = chain[i];
printf("HASH TABLE [%d]-->", i);
while (temp)
 {
printf("%d -->", temp->data);
temp = temp->next;
 }
printf("NULL\n");
 }
return 0;
}
int main()
{
int choice;
printf("\nPRESS \n1 for Without Collision\n2 for LINEAR PROBING\n3 for 
QUADRATIC PROBING\n4 for DOUBLE HASHING\n5 for Seperate Chaining\nENTER ANY 
CHOICE:");
scanf("%d", &choice);
switch (choice)
 {
case 1:
without_collision_case();
break;
case 2:
linear_probing();
break;
case 3:
quadratic_probing();
break;
case 4:
double_hashing();
break;
case 5:
separate_chaining();
break;
default:
printf("\nINVALID CHOICE!!!");
break;
 }
return 0;
}
